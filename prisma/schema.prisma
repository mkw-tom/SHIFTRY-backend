generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  lineId    String   @unique
  name      String
  pictureUrl  String?
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // M:N のリレーション（オーナーが管理する店舗）
  ownedStores OwnerStore[]
  // M:N のリレーション（スタッフとして所属する店舗）
  userStores  UserStore[]
  submittedShifts  SubmittedShift[]
}

enum UserRole {
  OWNER
  STAFF
}

model Store {
  id        String   @id @default(uuid())
  groupId   String   @unique
  storeId   String?   @unique @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // M:N（オーナーとのリレーション）
  ownerStores OwnerStore[]

  // M:N（スタッフとのリレーション）
  userStores UserStore[]

  // シフトデータ
  storeShifts StoreShift[]
  submittedShifts  SubmittedShift[]

}


// 中間テーブル（オーナーと店舗の M:N 関係）
model OwnerStore {
  ownerId String
  storeId String

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@id([ownerId, storeId]) // 複合主キー
}

// 中間テーブル（スタッフと店舗の M:N 関係）
model UserStore {
  userId   String
  storeId  String

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  store    Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@id([userId, storeId]) // 複合主キー
}

// シフトデータ
// 確定シフトデータ（店舗用）
model StoreShift {
  id        String   @id @default(uuid())
  storeId   String
  weekStart DateTime
  weekEnd   DateTime? 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  submittedShifts SubmittedShift[] @relation("StoreToSubmitted")

}

// ユーザーの提出シフト
model SubmittedShift {
  id          String   @id @default(uuid())
  userId      String    
  storeId     String   
  shifts      Json    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 🔥 修正：store のリレーションに `map` を追加して、外部キー名を明示的に設定
  store       Store      @relation(fields: [storeId], references: [id], onDelete: Cascade, map: "SubmittedShift_storeId_store_fkey")
  
  // 🔥 修正：storeShift のリレーションにも `map` を追加して、別の外部キー名を設定
  storeShift  StoreShift @relation("StoreToSubmitted", fields: [storeId], references: [id], onDelete: Cascade, map: "SubmittedShift_storeId_storeShift_fkey")

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId]) // ✅ 1ユーザー1店舗につき1レコードのみ
}
