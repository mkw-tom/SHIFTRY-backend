generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  lineId         String           @unique
  name           String
  pictureUrl     String?
  role           UserRole
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())

  userStores     UserStore[]
  submittedShifts SubmittedShift[]
}

enum UserRole {
  OWNER
  MANAGER
  STAFF
}

model Store {
  id               String           @id @default(uuid())
  groupId          String           @unique
  storeId          String?          @unique @default(uuid())
  name             String           @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())

  userStores       UserStore[]      
  shiftRequests    ShiftRequest[]   
  assignShifts     AssignShift[]   
  submittedShifts  SubmittedShift[] 
  payment          Payment?
}

// 中間テーブル（ユーザーと店舗の M:N 関係）
model UserStore {
  userId   String
  storeId  String
  role     UserRole

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  store    Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@id([userId, storeId])
}

// シフト募集データ
model ShiftRequest {
  id              String          @id @default(uuid())
  storeId         String
  weekStart       DateTime
  weekEnd         DateTime?
  requests        Json
  status          RequestStatus   @default(HOLD)
  deadline        DateTime?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  store           Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)

  assignShift     AssignShift?    
  submittedShifts SubmittedShift[]

  @@unique([storeId, weekStart])
}

enum RequestStatus {
  HOLD
  REQUEST
  ADJUSTMENT
  CONFIRMED
}

// 確定シフトデータ（店舗用）
model AssignShift {
  id              String        @id @default(uuid())
  storeId         String
  shiftRequestId  String        @unique
  weekStart       DateTime
  weekEnd         DateTime?
  shifts          Json
  status          ShiftStatus   @default(ADJUSTMENT)

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  store           Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  shiftRequest    ShiftRequest  @relation(fields: [shiftRequestId], references: [id], onDelete: Cascade)

  @@unique([storeId, weekStart])
}

enum ShiftStatus {
  ADJUSTMENT
  CONFIRMED
}

// ユーザーの提出シフト
model SubmittedShift {
  id              String         @id @default(uuid())
  userId          String
  storeId         String
  shiftRequestId  String
  attendCount     Int
  shifts          Json
  weekStart       DateTime
  weekEnd         DateTime
  status          ShiftStatus

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  store           Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  shiftRequest    ShiftRequest   @relation(fields: [shiftRequestId], references: [id], onDelete: Cascade)


  @@unique([userId, storeId, weekStart])
}

// Stripe連携などの支払い情報
model Payment {
  id                  String   @id @default(uuid())
  storeId             String   @unique
  userId              String
  customerId          String
  subscriptionId      String
  priceId             String
  subscription_status String
  next_billing_date   DateTime
  trial_end_date      DateTime

  store               Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
}
