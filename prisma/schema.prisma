generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  lineId    String   @unique
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // M:N のリレーション（オーナーが管理する店舗）
  ownedStores OwnerStore[]

  // M:N のリレーション（スタッフとして所属する店舗）
  userStores  UserStore[]
}

enum UserRole {
  OWNER
  STAFF
}

model Store {
  id        String   @id @default(uuid())
  groupId   String   @unique 
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // M:N（オーナーとのリレーション）
  ownerStores OwnerStore[]

  // M:N（スタッフとのリレーション）
  userStores UserStore[]

  // シフトデータ
  storeShifts StoreShift[]
}


// 中間テーブル（オーナーと店舗の M:N 関係）
model OwnerStore {
  ownerId String
  storeId String

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@id([ownerId, storeId]) // 複合主キー
}

// 中間テーブル（スタッフと店舗の M:N 関係）
model UserStore {
  userId   String
  storeId  String

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  store    Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@id([userId, storeId]) // 複合主キー
}

// シフトデータ
model StoreShift {
  id        String   @id @default(uuid())
  storeId   String
  weekStart DateTime
  weekEnd   DateTime? 
  shifts    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
}
